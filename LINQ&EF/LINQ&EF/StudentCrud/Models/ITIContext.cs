// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace StudentCrud.Models;

public partial class ITIContext : DbContext
{
    public ITIContext()
    {
    }

    public ITIContext(DbContextOptions<ITIContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Course> Courses { get; set; }

    public virtual DbSet<Department> Departments { get; set; }

    public virtual DbSet<Ins_Course> Ins_Courses { get; set; }

    public virtual DbSet<Instructor> Instructors { get; set; }

    public virtual DbSet<Stud_Course> Stud_Courses { get; set; }

    public virtual DbSet<Student> Students { get; set; }

    public virtual DbSet<Topic> Topics { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=DESKTOP-77H1T1P\\SQLEXPRESS;Initial Catalog=ITI;Integrated Security=True;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Course>(entity =>
        {
            entity.HasKey(e => e.Crs_Id);

            entity.ToTable("Course");

            entity.Property(e => e.Crs_Id).ValueGeneratedNever();
            entity.Property(e => e.Crs_Name).HasMaxLength(50);

            entity.HasOne(d => d.Top).WithMany(p => p.Courses)
                .HasForeignKey(d => d.Top_Id)
                .HasConstraintName("FK_Course_Topic");
        });

        modelBuilder.Entity<Department>(entity =>
        {
            entity.HasKey(e => e.Dept_Id);

            entity.ToTable("Department");

            entity.Property(e => e.Dept_Id).ValueGeneratedNever();
            entity.Property(e => e.Dept_Desc).HasMaxLength(100);
            entity.Property(e => e.Dept_Location).HasMaxLength(50);
            entity.Property(e => e.Dept_Name).HasMaxLength(50);
            entity.Property(e => e.Manager_hiredate).HasColumnType("date");

            entity.HasOne(d => d.Dept_ManagerNavigation).WithMany(p => p.Departments)
                .HasForeignKey(d => d.Dept_Manager)
                .HasConstraintName("FK_Department_Instructor");
        });

        modelBuilder.Entity<Ins_Course>(entity =>
        {
            entity.HasKey(e => new { e.Ins_Id, e.Crs_Id });

            entity.ToTable("Ins_Course");

            entity.Property(e => e.Evaluation).HasMaxLength(50);

            entity.HasOne(d => d.Crs).WithMany(p => p.Ins_Courses)
                .HasForeignKey(d => d.Crs_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Ins_Course_Course");

            entity.HasOne(d => d.Ins).WithMany(p => p.Ins_Courses)
                .HasForeignKey(d => d.Ins_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Ins_Course_Instructor");
        });

        modelBuilder.Entity<Instructor>(entity =>
        {
            entity.HasKey(e => e.Ins_Id);

            entity.ToTable("Instructor");

            entity.Property(e => e.Ins_Id).ValueGeneratedNever();
            entity.Property(e => e.Ins_Degree).HasMaxLength(50);
            entity.Property(e => e.Ins_Name).HasMaxLength(50);
            entity.Property(e => e.Salary).HasColumnType("money");

            entity.HasOne(d => d.Dept).WithMany(p => p.Instructors)
                .HasForeignKey(d => d.Dept_Id)
                .HasConstraintName("FK_Instructor_Department");
        });

        modelBuilder.Entity<Stud_Course>(entity =>
        {
            entity.HasKey(e => new { e.Crs_Id, e.St_Id });

            entity.ToTable("Stud_Course");

            entity.HasOne(d => d.Crs).WithMany(p => p.Stud_Courses)
                .HasForeignKey(d => d.Crs_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Stud_Course_Course");

            entity.HasOne(d => d.St).WithMany(p => p.Stud_Courses)
                .HasForeignKey(d => d.St_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Stud_Course_Student");
        });

        modelBuilder.Entity<Student>(entity =>
        {
            entity.HasKey(e => e.St_Id);

            entity.ToTable("Student");

            entity.Property(e => e.St_Id).ValueGeneratedNever();
            entity.Property(e => e.St_Address).HasMaxLength(100);
            entity.Property(e => e.St_Fname).HasMaxLength(50);
            entity.Property(e => e.St_Lname)
                .HasMaxLength(10)
                .IsFixedLength();

            entity.HasOne(d => d.Dept).WithMany(p => p.Students)
                .HasForeignKey(d => d.Dept_Id)
                .HasConstraintName("FK_Student_Department");

            entity.HasOne(d => d.St_superNavigation).WithMany(p => p.InverseSt_superNavigation)
                .HasForeignKey(d => d.St_super)
                .HasConstraintName("FK_Student_Student");
        });

        modelBuilder.Entity<Topic>(entity =>
        {
            entity.HasKey(e => e.Top_Id);

            entity.ToTable("Topic");

            entity.Property(e => e.Top_Id).ValueGeneratedNever();
            entity.Property(e => e.Top_Name).HasMaxLength(50);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}